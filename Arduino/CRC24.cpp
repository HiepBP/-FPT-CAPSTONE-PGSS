/*
	CRC24.cpp - An Arduino library for calculating a CRC24 checksum
*/

#include "Arduino.h"
#include "CRC24.h"

const uint32_t CRC_24_TABLE[256] PROGMEM = {
	0x00000000, 0x00864cfb, 0x008ad50d, 0x000c99f6, 0x0093e6e1, 0x0015aa1a, 0x001933ec,
	0x009f7f17, 0x00a18139, 0x0027cdc2, 0x002b5434, 0x00ad18cf, 0x003267d8, 0x00b42b23,
	0x00b8b2d5, 0x003efe2e, 0x00c54e89, 0x00430272, 0x004f9b84, 0x00c9d77f, 0x0056a868,
	0x00d0e493, 0x00dc7d65, 0x005a319e, 0x0064cfb0, 0x00e2834b, 0x00ee1abd, 0x00685646,
	0x00f72951, 0x007165aa, 0x007dfc5c, 0x00fbb0a7, 0x000cd1e9, 0x008a9d12, 0x008604e4,
	0x0000481f, 0x009f3708, 0x00197bf3, 0x0015e205, 0x0093aefe, 0x00ad50d0, 0x002b1c2b,
	0x002785dd, 0x00a1c926, 0x003eb631, 0x00b8faca, 0x00b4633c, 0x00322fc7, 0x00c99f60,
	0x004fd39b, 0x00434a6d, 0x00c50696, 0x005a7981, 0x00dc357a, 0x00d0ac8c, 0x0056e077,
	0x00681e59, 0x00ee52a2, 0x00e2cb54, 0x006487af, 0x00fbf8b8, 0x007db443, 0x00712db5,
	0x00f7614e, 0x0019a3d2, 0x009fef29, 0x009376df, 0x00153a24, 0x008a4533, 0x000c09c8,
	0x0000903e, 0x0086dcc5, 0x00b822eb, 0x003e6e10, 0x0032f7e6, 0x00b4bb1d, 0x002bc40a,
	0x00ad88f1, 0x00a11107, 0x00275dfc, 0x00dced5b, 0x005aa1a0, 0x00563856, 0x00d074ad,
	0x004f0bba, 0x00c94741, 0x00c5deb7, 0x0043924c, 0x007d6c62, 0x00fb2099, 0x00f7b96f,
	0x0071f594, 0x00ee8a83, 0x0068c678, 0x00645f8e, 0x00e21375, 0x0015723b, 0x00933ec0,
	0x009fa736, 0x0019ebcd, 0x008694da, 0x0000d821, 0x000c41d7, 0x008a0d2c, 0x00b4f302,
	0x0032bff9, 0x003e260f, 0x00b86af4, 0x002715e3, 0x00a15918, 0x00adc0ee, 0x002b8c15,
	0x00d03cb2, 0x00567049, 0x005ae9bf, 0x00dca544, 0x0043da53, 0x00c596a8, 0x00c90f5e,
	0x004f43a5, 0x0071bd8b, 0x00f7f170, 0x00fb6886, 0x007d247d, 0x00e25b6a, 0x00641791,
	0x00688e67, 0x00eec29c, 0x003347a4, 0x00b50b5f, 0x00b992a9, 0x003fde52, 0x00a0a145,
	0x0026edbe, 0x002a7448, 0x00ac38b3, 0x0092c69d, 0x00148a66, 0x00181390, 0x009e5f6b,
	0x0001207c, 0x00876c87, 0x008bf571, 0x000db98a, 0x00f6092d, 0x007045d6, 0x007cdc20,
	0x00fa90db, 0x0065efcc, 0x00e3a337, 0x00ef3ac1, 0x0069763a, 0x00578814, 0x00d1c4ef,
	0x00dd5d19, 0x005b11e2, 0x00c46ef5, 0x0042220e, 0x004ebbf8, 0x00c8f703, 0x003f964d,
	0x00b9dab6, 0x00b54340, 0x00330fbb, 0x00ac70ac, 0x002a3c57, 0x0026a5a1, 0x00a0e95a,
	0x009e1774, 0x00185b8f, 0x0014c279, 0x00928e82, 0x000df195, 0x008bbd6e, 0x00872498,
	0x00016863, 0x00fad8c4, 0x007c943f, 0x00700dc9, 0x00f64132, 0x00693e25, 0x00ef72de,
	0x00e3eb28, 0x0065a7d3, 0x005b59fd, 0x00dd1506, 0x00d18cf0, 0x0057c00b, 0x00c8bf1c,
	0x004ef3e7, 0x00426a11, 0x00c426ea, 0x002ae476, 0x00aca88d, 0x00a0317b, 0x00267d80,
	0x00b90297, 0x003f4e6c, 0x0033d79a, 0x00b59b61, 0x008b654f, 0x000d29b4, 0x0001b042,
	0x0087fcb9, 0x001883ae, 0x009ecf55, 0x009256a3, 0x00141a58, 0x00efaaff, 0x0069e604,
	0x00657ff2, 0x00e33309, 0x007c4c1e, 0x00fa00e5, 0x00f69913, 0x0070d5e8, 0x004e2bc6,
	0x00c8673d, 0x00c4fecb, 0x0042b230, 0x00ddcd27, 0x005b81dc, 0x0057182a, 0x00d154d1,
	0x0026359f, 0x00a07964, 0x00ace092, 0x002aac69, 0x00b5d37e, 0x00339f85, 0x003f0673,
	0x00b94a88, 0x0087b4a6, 0x0001f85d, 0x000d61ab, 0x008b2d50, 0x00145247, 0x00921ebc,
	0x009e874a, 0x0018cbb1, 0x00e37b16, 0x006537ed, 0x0069ae1b, 0x00efe2e0, 0x00709df7,
	0x00f6d10c, 0x00fa48fa, 0x007c0401, 0x0042fa2f, 0x00c4b6d4, 0x00c82f22, 0x004e63d9,
	0x00d11cce, 0x00575035, 0x005bc9c3, 0x00dd8538
	};
	
CRC24::CRC24()
{
	CRC_24_INITIALIZATION = 0x00b704ce;
}

CRC24::CRC24(uint32_t init)
{
	CRC_24_INITIALIZATION = init;
}

uint32_t CRC24::calculate(const uint8_t* data, uint8_t size)
{
	uint32_t result = CRC_24_INITIALIZATION;
	for(int i=0; i < size; i++) 
	{
		byte b = data[i];
		uint8_t index = ((result >> 16) ^ b) & 0xff;
		result = (pgm_read_dword_near(CRC_24_TABLE + index) ^ (result << 8)) & 0x00ffffff;
	}
	
	return result;
}

uint32_t CRC24::calculateDebug(const uint8_t* data, uint8_t size)
{
	uint32_t result = CRC_24_INITIALIZATION;
	Serial.print(F("Initial register: "));
	Serial.println(result);
	for(int i=0; i < size; i++) 
	{
		byte b = data[i];
		Serial.print("Message byte: ");
		Serial.println(b);
		uint8_t index = ((result >> 16) ^ b) & 0xff;
		Serial.print(F("Index "));
		Serial.println(index);
		Serial.print(F("Table value: "));
		Serial.println(pgm_read_dword_near(CRC_24_TABLE + index));
		result = (pgm_read_dword_near(CRC_24_TABLE + index) ^ (result << 8)) & 0x00ffffff;
		Serial.print(F("New register: "));
		Serial.println(result);
	}
	
	return result;
}